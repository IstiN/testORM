package com.epam.testorm.greenDao.model;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CONTENT".
 */
public class Content {

    private Long id;
    private String description;
    private String comment;
    private String title;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContentDao myDao;

    private List<Images> images;
    private List<Links> links;
    private List<Videos> videos;
    private List<Audios> audios;

    public Content() {
    }

    public Content(Long id) {
        this.id = id;
    }

    public Content(Long id, String description, String comment, String title) {
        this.id = id;
        this.description = description;
        this.comment = comment;
        this.title = title;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Images> getImages() {
        if (images == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImagesDao targetDao = daoSession.getImagesDao();
            List<Images> imagesNew = targetDao._queryContent_Images(id);
            synchronized (this) {
                if(images == null) {
                    images = imagesNew;
                }
            }
        }
        return images;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetImages() {
        images = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Links> getLinks() {
        if (links == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LinksDao targetDao = daoSession.getLinksDao();
            List<Links> linksNew = targetDao._queryContent_Links(id);
            synchronized (this) {
                if(links == null) {
                    links = linksNew;
                }
            }
        }
        return links;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLinks() {
        links = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Videos> getVideos() {
        if (videos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VideosDao targetDao = daoSession.getVideosDao();
            List<Videos> videosNew = targetDao._queryContent_Videos(id);
            synchronized (this) {
                if(videos == null) {
                    videos = videosNew;
                }
            }
        }
        return videos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetVideos() {
        videos = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Audios> getAudios() {
        if (audios == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AudiosDao targetDao = daoSession.getAudiosDao();
            List<Audios> audiosNew = targetDao._queryContent_Audios(id);
            synchronized (this) {
                if(audios == null) {
                    audios = audiosNew;
                }
            }
        }
        return audios;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAudios() {
        audios = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
