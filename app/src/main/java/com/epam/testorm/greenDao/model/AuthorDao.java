package com.epam.testorm.greenDao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUTHOR".
*/
public class AuthorDao extends AbstractDao<Author, Long> {

    public static final String TABLENAME = "AUTHOR";

    /**
     * Properties of entity Author.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ref = new Property(1, Long.class, "ref", false, "REF");
        public final static Property Network = new Property(2, String.class, "network", false, "NETWORK");
        public final static Property User_id = new Property(3, String.class, "user_id", false, "USER_ID");
        public final static Property DisplayName = new Property(4, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
        public final static Property Profile = new Property(6, String.class, "profile", false, "PROFILE");
    };


    public AuthorDao(DaoConfig config) {
        super(config);
    }
    
    public AuthorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUTHOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REF\" INTEGER," + // 1: ref
                "\"NETWORK\" TEXT," + // 2: network
                "\"USER_ID\" TEXT," + // 3: user_id
                "\"DISPLAY_NAME\" TEXT," + // 4: displayName
                "\"AVATAR\" TEXT," + // 5: avatar
                "\"PROFILE\" TEXT);"); // 6: profile
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUTHOR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Author entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long ref = entity.getRef();
        if (ref != null) {
            stmt.bindLong(2, ref);
        }
 
        String network = entity.getNetwork();
        if (network != null) {
            stmt.bindString(3, network);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(4, user_id);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(5, displayName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String profile = entity.getProfile();
        if (profile != null) {
            stmt.bindString(7, profile);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Author readEntity(Cursor cursor, int offset) {
        Author entity = new Author( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ref
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // network
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // displayName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // profile
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Author entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRef(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNetwork(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDisplayName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProfile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Author entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Author entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
